(boolean execheap true)
(boolean execmem true)
(boolean execstack true)
(boolean mmap_low true)

(boolean ptrace_all true)

(typeattribute subject_type)
(typeattribute subject_common_type)
(typeattribute subject_entry_type)

(roleattribute subject_unconfined_role)
(typeattribute subject_unconfined_type)

(typeattribute can_change_object_identity)
(typeattribute can_change_subject_identity)
(typeattribute can_change_subject_role)
(typeattribute can_change_system_identity)
(typeattribute can_change_system_role)
(typeattribute uncond_exempt)
(typeattribute user_target)

(block subject_block
    (blockabstract subject_block)
        (type subject)
        (call subject_type (subject))
)

(block subject_common_block
    (blockabstract subject_common_block)
        (type common_subject)
        (call subject_common_type (common_subject))
)

(block subject_entry_block
    (blockabstract subject_entry_block)
        (blockinherit bin_object_block)
        (blockinherit subject_common_block)

        (call subject_entry (common_subject bin_object))
)

(block subject_system_entry_block
    (blockabstract subject_system_entry_block)
        (blockinherit subject_entry_block)

        (call sys_subject_type (common_subject))
)

(block execheap
    (blockinherit sec_bool_object_block)

    (context execheap (sys.u sys.r bool_object
        (systemlow systemlow)))
    (genfscon "selinuxfs" "/booleans/execheap"
        execheap)
)

(block execmem
    (blockinherit sec_bool_object_block)

    (context execmem (sys.u sys.r bool_object
        (systemlow systemlow)))
    (genfscon "selinuxfs" "/booleans/execmem"
        execmem)
)

(block execstack
    (blockinherit sec_bool_object_block)

    (context execstack (sys.u sys.r bool_object
        (systemlow systemlow)))
    (genfscon "selinuxfs" "/booleans/execstack"
        execstack)
)

(block mmap_low
    (blockinherit sec_bool_object_block)

    (context mmap_low (sys.u sys.r bool_object
        (systemlow systemlow)))
    (genfscon "selinuxfs" "/booleans/mmap_low"
        mmap_low)
)

(block ptrace_all
    (blockinherit sec_bool_object_block)

    (context ptrace_all (sys.u sys.r bool_object
        (systemlow systemlow)))
    (genfscon "selinuxfs" "/booleans/ptrace_all"
        ptrace_all)
)

(typeattribute not_subject_entry_type)
(typeattributeset not_subject_entry_type (not
    (subject_entry_type)))
(neverallow subject_type not_subject_entry_type
    (file (entrypoint)))

(typeattribute not_subject_type)
(typeattributeset not_subject_type (not subject_type))
(neverallow subject_type not_subject_type (process (transition
    dyntransition)))

(typeattribute can_set_current_context)
(typeattribute not_can_set_current_context)
(typeattributeset not_can_set_current_context
    (and (subject_type) (not (can_set_current_context))))
(neverallow not_can_set_current_context self (process (setcurrent)))

(typeattribute can_execheap)
(typeattribute not_can_execheap)
(typeattributeset not_can_execheap
    (and (subject_type) (not (can_execheap))))
(neverallow not_can_execheap self (process (execheap)))

(typeattribute can_execmem)
(typeattribute not_can_execmem)
(typeattributeset not_can_execmem
    (and (subject_type) (not (can_execmem))))
(neverallow not_can_execmem self (process (execmem)))

(typeattribute can_execstack)
(typeattribute not_can_execstack)
(typeattributeset not_can_execstack
    (and (subject_type) (not (can_execstack))))
(neverallow not_can_mmap_low self (process (execmem execstack)))

(typeattribute can_mmap_low)
(typeattribute not_can_mmap_low)
(typeattributeset not_can_mmap_low
    (and (subject_type) (not (can_mmap_low))))
(neverallow not_can_mmap_low self (memprotect (mmap_zero)))

(allow subject_common_type self (process (fork)))
(allow subject_common_type self signal_perms)
(allow subject_common_type self rw_file_perms)
(allow subject_common_type self list_dir_perms)
(allow subject_common_type self read_lnk_file_perms)

(call sys_read_vm_overcommit_sysctl (subject_common_type))

(call bin_search (subject_common_type))

(call fs_read_generic_proc_files (subject_common_type))
(call fs_search_devtmpfs (subject_common_type))
(call fs_search_rootfs (subject_common_type))

(call dev_rw_devtty (subject_common_type))
(call dev_rw_null (subject_common_type))
(call dev_rw_zero (subject_common_type))

(call sec_getattr_filesystems (subject_common_type))

(optional subject_common_type_optional_lib
    (call lib_use_ld_so (subject_common_type))
    (call lib_use_shared_libs (subject_common_type)))

(optional subject_common_type_optional_systemd
    (call systemd_send_sigchld (subject_common_type))
        (optional subject_common_type_optional_shutdown
            (call shutdown_send_sigchld (subject_common_type))))

(allow subject_unconfined_type subject_type
    all_process_perms_except_transition_ptrace_setsched_dyntransition_setcurrent_execmem_execstack_and_execheap)
(allow subject_unconfined_type subject_type rw_file_perms)
(allow subject_unconfined_type subject_type list_dir_perms)
(allow subject_unconfined_type subject_type read_lnk_file_perms)
(allow subject_unconfined_type subject_type (fd (all)))
(allow subject_unconfined_type subject_type (socket (all)))
(allow subject_unconfined_type subject_type create_tcp_stream_socket_perms)
(allow subject_unconfined_type subject_type create_udp_socket_perms)
(allow subject_unconfined_type subject_type create_rawip_socket_perms)
(allow subject_unconfined_type subject_type (netlink_socket (all)))
(allow subject_unconfined_type subject_type (packet_socket (all)))
(allow subject_unconfined_type subject_type (unix_stream_socket (all)))
(allow subject_unconfined_type subject_type (unix_dgram_socket (all)))
(allow subject_unconfined_type subject_type (sem (all)))
(allow subject_unconfined_type subject_type (msg (all)))
(allow subject_unconfined_type subject_type (msgq (all)))
(allow subject_unconfined_type subject_type (shm (all)))
(allow subject_unconfined_type subject_type (ipc (all)))
(allow subject_unconfined_type subject_type (netlink_route_socket (all)))
(allow subject_unconfined_type subject_type (netlink_firewall_socket (all)))
(allow subject_unconfined_type subject_type (netlink_tcpdiag_socket (all)))
(allow subject_unconfined_type subject_type (netlink_nflog_socket (all)))
(allow subject_unconfined_type subject_type (netlink_xfrm_socket (all)))
(allow subject_unconfined_type subject_type (netlink_selinux_socket (all)))
(allow subject_unconfined_type subject_type (netlink_audit_socket (all)))
(allow subject_unconfined_type subject_type (netlink_ip6fw_socket (all)))
(allow subject_unconfined_type subject_type (netlink_dnrt_socket (all)))
(allow subject_unconfined_type subject_type (netlink_kobject_uevent_socket (all)))
(allow subject_unconfined_type subject_type (appletalk_socket (all)))
(allow subject_unconfined_type subject_type (key (all)))
(allow subject_unconfined_type subject_type create_dccp_stream_socket_perms)
(allow subject_unconfined_type subject_type (tun_socket (all)))

(call subject_dynamic_subject_type_transition_subject (subject_unconfined_type))
(call subject_execheap (subject_unconfined_type))
(call subject_execmem (subject_unconfined_type))
(call subject_execstack (subject_unconfined_type))
(call subject_mmap_low (subject_unconfined_type))
(call subject_ptrace_all (subject_unconfined_type))
(call subject_object_identity_change_exemption (subject_unconfined_type))
(call subject_uncond_exemption (subject_unconfined_type))

(allow subject_unconfined_type subject_entry_type (file (entrypoint)))

(roletype subject_unconfined_role subject_type)

(macro subject_type ((type ARG1))
    (typeattributeset subject_type ARG1))

(macro subject_common_type ((type ARG1))
    (call subject_type (ARG1))
    (typeattributeset subject_common_type ARG1))

(macro subject_system_change_exemption ((type ARG1))
    (call subject_system_identity_change_exemption (ARG1))
    (call subject_system_role_change_exemption (ARG1)))

(macro subject_system_identity_change_exemption ((type ARG1))
    (typeattributeset can_change_system_identity ARG1))

(macro subject_system_role_change_exemption ((type ARG1))
    (typeattributeset can_change_system_role ARG1))

(macro subject_change_exemption ((type ARG1))
    (call subject_identity_change_exemption (ARG1))
    (call subject_role_change_exemption (ARG1)))

(macro subject_identity_change_exemption ((type ARG1))
    (typeattributeset can_change_subject_identity ARG1))

(macro subject_role_change_exemption ((type ARG1))
    (typeattributeset can_change_subject_role ARG1))

(macro subject_object_identity_change_exemption ((type ARG1))
    (typeattributeset can_change_object_identity ARG1))

(macro subject_uncond_exemption ((type ARG1))
    (typeattributeset uncond_exempt ARG1))

(macro subject_user_exemption_target ((type ARG1))
    (typeattributeset user_target ARG1))

(macro subject_dynamic_subject_type_transition_subject ((type ARG1))
    (typeattributeset can_set_current_context ARG1))

(macro subject_entry ((type ARG1)(type ARG2))
    (allow ARG1 ARG2 (file (entrypoint)))
    (allow ARG1 ARG2 mmap_file_perms)
    (call subject_entry_type (ARG2)))

(macro subject_entry_type ((type ARG1))
    (typeattributeset subject_entry_type ARG1))

(macro subject_read_all_subjects_state ((type ARG1))
    (allow ARG1 subject_type list_dir_perms)
    (allow ARG1 subject_type read_file_perms)
    (allow ARG1 subject_type read_lnk_file_perms))

(macro subject_read_all_common_subjects_state ((type ARG1))
    (allow ARG1 subject_common_type list_dir_perms)
    (allow ARG1 subject_common_type read_file_perms)
    (allow ARG1 subject_common_type read_lnk_file_perms))

(macro subject_getpgid_all_subjects ((type ARG1))
    (allow ARG1 subject_type (process (getpgid))))

(macro subject_getpgid_all_common_subjects ((type ARG1))
    (allow ARG1 subject_common_type (process (getpgid))))

(macro subject_send_sigkill_all_subjects ((type ARG1))
    (allow ARG1 subject_type (process (sigkill))))

(macro subject_send_sigkill_all_common_subjects ((type ARG1))
    (allow ARG1 subject_common_type (process (sigkill))))

(macro subject_send_signal_all_subjects ((type ARG1))
    (allow ARG1 subject_type (process (signal))))

(macro subject_send_signal_all_common_subjects ((type ARG1))
    (allow ARG1 subject_common_type (process (signal))))

(macro subject_send_signull_all_subjects ((type ARG1))
    (allow ARG1 subject_type (process (signull))))

(macro subject_send_signull_all_common_subjects ((type ARG1))
    (allow ARG1 subject_common_type (process (signull))))

(macro subject_send_sigstop_all_subjects ((type ARG1))
    (allow ARG1 subject_type (process (sigstop))))

(macro subject_send_sigstop_all_common_subjects ((type ARG1))
    (allow ARG1 subject_common_type (process (sigstop))))

(macro subject_execheap ((type ARG1))
    (typeattributeset can_execheap ARG1)
    (booleanif execheap
        (true
            (allow ARG1 self (process (execheap))))))

(macro subject_execheap_uncond ((type ARG1))
    (allow ARG1 self (process (execheap)))
    (typeattributeset can_execheap ARG1))

(macro subject_execmem ((type ARG1))
    (typeattributeset can_execmem ARG1)
    (booleanif execmem
        (true
            (allow ARG1 self (process (execmem))))))

(macro subject_execmem_uncond ((type ARG1))
    (allow ARG1 self (process (execmem)))
    (typeattributeset can_execmem ARG1))

(macro subject_execstack ((type ARG1))
    (typeattributeset can_execstack ARG1)
    (booleanif execstack
        (true
            (allow ARG1 self (process (execmem execstack))))))

(macro subject_execstack_uncond ((type ARG1))
    (allow ARG1 self (process (execmem execstack)))
    (typeattributeset can_execstack ARG1))

(macro subject_mmap_low ((type ARG1))
    (typeattributeset can_mmap_low ARG1)
    (booleanif mmap_low
        (true
            (allow ARG1 self (memprotect (mmap_zero))))))

(macro subject_mmap_low_uncond ((type ARG1))
    (allow ARG1 self (memprotect (mmap_zero)))
    (typeattributeset can_mmap_low ARG1))

(macro subject_ptrace_all ((type ARG1))
    (booleanif ptrace_all
        (true
            (allow ARG1 self (capability (sys_ptrace)))
            (allow ARG1 subject_type (process (ptrace))))))

(macro subject_ptrace_all_uncond ((type ARG1))
    (allow ARG1 self (capability (sys_ptrace)))
    (allow ARG1 subject_type (process (ptrace))))

(macro subject_unconfined ((role ARG1)(type ARG2))
    (roleattributeset subject_unconfined_role ARG1)
    (typeattributeset subject_unconfined_type ARG2))
